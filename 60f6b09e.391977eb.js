(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{109:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=r.a.createContext({}),b=function(e){var t=r.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},p=function(e){var t=b(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=b(a),d=n,m=p["".concat(o,".").concat(d)]||p[d]||u[d]||i;return a?r.a.createElement(m,c(c({ref:t},s),{},{components:a})):r.a.createElement(m,c({ref:t},s))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,o[1]=c;for(var s=2;s<i;s++)o[s]=a[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"},82:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return c})),a.d(t,"toc",(function(){return l})),a.d(t,"default",(function(){return b}));var n=a(3),r=a(7),i=(a(0),a(109)),o={id:"challenges",title:"Challenges"},c={unversionedId:"challenges",id:"challenges",isDocsHomePage:!1,title:"Challenges",description:"React Native Web",source:"@site/docs/challenges.md",slug:"/challenges",permalink:"/react-native-aria/docs/challenges",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/challenges.md",version:"current",sidebar:"someSidebar",previous:{title:"Approach",permalink:"/react-native-aria/docs/approach"},next:{title:"useFocusRing",permalink:"/react-native-aria/docs/useFocusRing"}},l=[{value:"React Native Web",id:"react-native-web",children:[]},{value:"Why not directly use React aria with react native web?",id:"why-not-directly-use-react-aria-with-react-native-web",children:[]},{value:"Example",id:"example",children:[]},{value:"Implementation",id:"implementation",children:[]},{value:"Usage",id:"usage",children:[]}],s={toc:l};function b(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h3",{id:"react-native-web"},"React Native Web"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/necolas/react-native-web"}),"React native web")," enables rendering React native components on web."),Object(i.b)("li",{parentName:"ul"},"This enables us to create components like checkbox/radio and reuse them on web without breaking the UI."),Object(i.b)("li",{parentName:"ul"},"However, the challenging part is to get the correct accessibility behavior."),Object(i.b)("li",{parentName:"ul"},"React native web does take this into ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://necolas.github.io/react-native-web/docs/?path=/docs/guides-accessibility--page"}),"consideration")," and tries to map ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://reactnative.dev/docs/accessibility"}),"RN accessibility")," props to equivalent ARIA."),Object(i.b)("li",{parentName:"ul"},"But getting the keyboard navigation right still requires manual efforts.")),Object(i.b)("h3",{id:"why-not-directly-use-react-aria-with-react-native-web"},"Why not directly use React aria with react native web?"),Object(i.b)("p",null,"Spreading props from ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://react-spectrum.adobe.com/react-aria/"}),"React Aria")," doesn't always work with react-native-web."),Object(i.b)("p",null,"Below props ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/necolas/react-native-web/blob/master/packages/react-native-web/src/exports/View/index.js#L25"}),"are not whitelisted")," to be passed on View."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"role (needs to be passed as accessibilityRole), tabIndex (should be set via ref or using focusable/accessible), id (needs to be passed as nativeID).")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/necolas/react-native-web/issues/1862"}),"onKeyDown cannot be passed to Pressable")," - should be set using ref."))),Object(i.b)("p",null,"This makes sense as they're not valid React native props. If you need all of the above, simply use a div or any html element from React DOM and react-native-web will not complain."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"But this will require platform detection code when you want to create a component library that works on web and mobile.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Writing platform specific conditions isn't that bad and sometimes essential, but using a div means you won't be able to use RN props e.g. (StyleSheet, onLayout, Animated)."))),Object(i.b)("h3",{id:"example"},"Example"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Building a custom radio group using react-native-aria.")),Object(i.b)("h3",{id:"implementation"},"Implementation"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"RadioGroup")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Define RadioContext (Using context will enable ",Object(i.b)("inlineCode",{parentName:"li"},"<Radio />")," access the ",Object(i.b)("inlineCode",{parentName:"li"},"<RadioGroup />")," state)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://react-spectrum.adobe.com/react-stately/useRadioGroupState.html"}),"useRadioGroupState")," will manage the group state."),Object(i.b)("li",{parentName:"ul"},"useRadioGroup returns ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://react-spectrum.adobe.com/react-aria/useRadioGroup.html"}),"React Aria")," for web and ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://reactnative.dev/docs/accessibility"}),"React accessibility")," props for iOS/Android.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),'import { useRadioGroupState } from "@react-stately/radio";\nimport { useRadio, useRadioGroup } from "@react-native-aria/radio";\nimport { Text, View } from "react-native";\n\nlet RadioContext = React.createContext();\n\nexport function RadioGroup(props) {\n  let { children, label } = props;\n  let state = useRadioGroupState(props);\n  let { radioGroupProps, labelProps } = useRadioGroup(props, state);\n\n  return (\n    <View {...radioGroupProps}>\n      <Text {...labelProps}>\n        {label}\n      </Text>\n      <RadioContext.Provider\n        value={{\n          isDisabled: props.isDisabled,\n          isReadOnly: props.isReadOnly,\n          state,\n        }}\n      >\n        {children}\n      </RadioContext.Provider>\n    </View>\n  );\n}\n\n')),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Radio")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Using state from RadioGroup Context."),Object(i.b)("li",{parentName:"ul"},"useRadio returns ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://react-spectrum.adobe.com/react-aria/useRadioGroup.html"}),"React Aria")," for web and ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://reactnative.dev/docs/accessibility"}),"React accessibility")," props for iOS/Android."),Object(i.b)("li",{parentName:"ul"},"For web, we wrap the radio into ",Object(i.b)("inlineCode",{parentName:"li"},"<label />"),". This gives us ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.w3.org/TR/wai-aria-practices-1.1/examples/radio/radio-1/radio-1.html"}),"web accessibility")," for free.\nStill we have full control over styling on ",Object(i.b)("inlineCode",{parentName:"li"},"radioContent"),".")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),'import { VisuallyHidden } from "@react-aria/visually-hidden";\nimport { useRadio } from "@react-native-aria/radio";\n\nexport function Radio(props) {\n  let { state, isReadOnly, isDisabled } = React.useContext(RadioContext);\n\n  const inputRef = React.useRef(null);\n\n  let { inputProps } = useRadio(\n    { isReadOnly, isDisabled, ...props },\n    state,\n    inputRef\n  );\n\n  let isSelected = state.selectedValue === props.value;\n  const icon = isSelected ? "radiobox-marked" : "radiobox-blank";\n\n  const radioContent = (\n     <View style={{ flexDirection: "row", alignItems: "center" }}>\n         <View>\n            <MaterialCommunityIcons size={30} color={"#000"} name={icon} />\n         </View>\n         <Text>{props.children}</Text>\n      </View>\n  )\n\n  return (\n    <>\n      {Platform.OS === "web" ? (\n        <label>\n          <VisuallyHidden>\n            <input {...inputProps} ref={inputRef}></input>\n          </VisuallyHidden>\n            {radioContent}\n        </label>\n      ) : (\n        <Pressable {...inputProps}>\n            {radioContent}\n        </Pressable>\n      )}\n    </>\n  );\n}\n')),Object(i.b)("h3",{id:"usage"},"Usage"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),'const RadioExample = () => {\n  return (\n    <RadioGroup label="Favorite pet">\n      <Radio value="dogs">Dogs</Radio>\n      <Radio value="cats">Cats</Radio>\n    </RadioGroup>\n  );\n};\n')))}b.isMDXComponent=!0}}]);